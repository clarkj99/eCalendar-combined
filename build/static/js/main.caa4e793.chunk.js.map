{"version":3,"sources":["hooks/eventForm.js","utils.js","components/EventModal.js","components/CalendarBody.js","components/EventList.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["useEventForm","initialState","updateState","useState","inputs","setInputs","handleSubmit","event","preventDefault","handleInputChange","persist","target","name","value","adjustedMonth","month","dateClass","item","today","events","selectedDate","className","day","getDate","getMonth","year","getFullYear","find","Date","startTime","toggleModal","modalActive","setModalActive","changeMonth","number","dateForMonth","setDateForMonth","newDate","getTime","setMonth","stringToDate","startDate","substring","localTimeString","time","toLocaleTimeString","hour","minute","months","days","EventModal","props","id","onClick","onSubmit","type","onChange","title","required","endDate","endTime","CalendarBody","setSelectedDate","currentMonthEvents","String","fromCharCode","map","key","tempDate","setDate","getDay","i","calendarDaysJS","EventList","selectedDayEvents","toLocaleDateString","weekday","length","Calendar","setEvents","fetchEvents","a","fetch","json","then","data","console","log","useEffect","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caa4e793.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useEventForm = (initialState, updateState) => {\n    const [inputs, setInputs] = useState({ ...initialState });\n\n    const handleSubmit = (event) => {\n        if (event) {\n            event.preventDefault();\n        }\n        updateState();\n        setInputs({ ...initialState })\n    }\n\n    const handleInputChange = (event) => {\n        event.persist();\n        setInputs(inputs => ({ ...inputs, [event.target.name]: event.target.value }));\n    }\n\n    return {\n        handleSubmit,\n        handleInputChange,\n        inputs\n    };\n}\n\nexport default useEventForm;","/** Helper Functions and Constants */\n\nexport function adjustedMonth(month) {\n    if (month < 0)\n        month += 12\n    else if (month > 11)\n        month -= 12\n    return month\n}\n\nexport function calendarDaysJS(dateForMonth) {\n    const days = []\n    const tempDate = new Date(dateForMonth.getTime())\n    tempDate.setDate(1)\n    tempDate.setDate(1 - tempDate.getDay())\n    for (let i = 1; i <= 42; i++) {\n        days[i] = { day: tempDate.getDate(), month: tempDate.getMonth(), year: tempDate.getFullYear() }\n        tempDate.setDate(tempDate.getDate() + 1)\n    }\n    return days\n}\n\nexport function dateClass(item, month, today, events, selectedDate) {\n    let className = item.month === month ? \"active-day\" : \"inactive-day\"\n\n    if (item.day === today.getDate() && item.month === today.getMonth() && item.year === today.getFullYear()) {\n        className += \" current\"\n    }\n\n    if (events.find(event => item.day === new Date(event.startTime).getDate() && item.month === new Date(event.startTime).getMonth())) {\n        className += \" events\"\n    }\n\n    if (item.day === selectedDate.getDate() && item.month === selectedDate.getMonth() && item.year === selectedDate.getFullYear()) {\n        className += \" selected\"\n    }\n\n    return className\n}\n\nexport const toggleModal = (modalActive, setModalActive) => {\n    setModalActive(!modalActive)\n}\n\nexport const changeMonth = (number, dateForMonth, setDateForMonth) => {\n    const newDate = new Date(dateForMonth.getTime())\n    newDate.setMonth(dateForMonth.getMonth() + number, 1)\n    setDateForMonth(newDate)\n}\n\nexport function stringToDate(startDate, startTime) {\n    return new Date(startDate.substring(0, 4), startDate.substring(5, 7) - 1, startDate.substring(8, 10), startTime.substring(0, 2), startTime.substring(3, 5))\n}\n\nexport function localTimeString(time) {\n    return new Date(time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n}\n\nexport const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const fullMonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nexport const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nexport const fullDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];","import React from 'react'\nimport { toggleModal } from '../utils'\n\nfunction EventModal(props) {\n    const { modalActive, setModalActive, handleSubmit, handleInputChange, inputs } = props;\n    return (\n        <div id=\"eventModal\" className={\"modal-active\"}>\n            <div className=\"modal-content\">\n                <div>\n                    <span className=\"close\" onClick={() => toggleModal(modalActive, setModalActive)}>&times;</span>\n                </div>\n                <div className=\"modal-form\">\n                    <span className=\"modal-title\">New Event</span>\n                    <form onSubmit={handleSubmit}>\n\n                        <div>\n                            <label>Title:</label>\n                            <input type=\"text\" name=\"title\" onChange={handleInputChange} value={inputs.title} required />\n\n                        </div>\n                        <div>\n                            <div>\n                                <label>Start Date: </label>\n                                <input name=\"startDate\" type=\"date\" onChange={handleInputChange} value={inputs.startDate} required />\n\n                            </div>\n                            <div><label>Time:  </label>\n                                <input name=\"startTime\" type=\"time\" onChange={handleInputChange} value={inputs.startTime} required />\n\n                            </div>\n                        </div>\n                        <div>\n                            <div>\n                                <label>End Date: </label>\n                                <input name=\"endDate\" type=\"date\" onChange={handleInputChange} value={inputs.endDate} required />\n\n                            </div>\n                            <div><label>Time:  </label>\n                                <input name=\"endTime\" type=\"time\" onChange={handleInputChange} value={inputs.endTime} required />\n\n                            </div>\n                        </div>\n                        <div className=\"button\">\n                            <button>Add Event</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default EventModal ","import React from 'react'\nimport { adjustedMonth, calendarDaysJS, dateClass, changeMonth, months, days } from '../utils'\n\nfunction CalendarBody(props) {\n    const { today, dateForMonth, setDateForMonth, selectedDate, setSelectedDate, currentMonthEvents } = props;\n    const month = dateForMonth.getMonth();\n    return (\n        <div className='calendar-box'>\n            <div className=\"calendar-header\">\n                <span className=\"calendar-title\">eCalendar</span>\n                <span className=\"calendar-year\">{dateForMonth.getFullYear()}</span>\n            </div>\n            <div className=\"calendar-months\">\n                <span className=\"inactive-month\">{months[adjustedMonth(dateForMonth.getMonth() - 1)]}</span>\n                <span>{months[dateForMonth.getMonth()]}</span>\n                <span className=\"inactive-month\">{months[adjustedMonth(dateForMonth.getMonth() + 1)]}</span>\n            </div>\n            <div className=\"h-line\">\n                <hr />\n            </div>\n            <div className=\"calendar-controls\">\n                <span className=\"calendar-arrow text-button\" onClick={() => changeMonth(-1, dateForMonth, setDateForMonth)}> {String.fromCharCode(10132)} </span>\n                <div className=\"calendar-body\">\n                    <div className=\"calendar-days\">\n                        {days.map(day => <span key={day}>{day}</span>)}\n                    </div>\n                    <div className=\"calendar-dates\">\n                        {calendarDaysJS(dateForMonth).map(item => <div key={item.month + ' ' + item.day} className={dateClass(item, month, today, currentMonthEvents, selectedDate)} onClick={() => setSelectedDate(new Date(item.year, item.month, item.day))}>\n                            <span>{item.day}</span>\n                            <span></span>\n                        </div>)}\n                    </div>\n                </div>\n                <span className=\"calendar-arrow text-button\" onClick={() => changeMonth(1, dateForMonth, setDateForMonth)}>{String.fromCharCode(10132)}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default CalendarBody","import React from 'react'\nimport { toggleModal, localTimeString } from '../utils'\n\nfunction EventList(props) {\n    const { selectedDate, selectedDayEvents, modalActive, setModalActive } = props\n    return (\n        <div className=\"event-box\">\n            <div className=\"event-signin text-button\">Sign In</div>\n            <div className=\"event-date\"><span>{selectedDate.toLocaleDateString(['us'], { weekday: 'long' })}</span> <span>{selectedDate.toLocaleDateString([], { month: 'long' })} {selectedDate.getDate()}</span></div>\n\n            <div className=\"event-details\">\n                <div className=\"v-line\"></div>\n                <div className=\"list\">\n                    {selectedDayEvents.length ? selectedDayEvents.map((event, i) => <div key={i}>{localTimeString(event.startTime)} - {localTimeString(event.endTime)} {event.title}</div>) : <div>No events for this date</div>}\n                </div>\n            </div>\n            <div className=\"event-create text-button\" onClick={() => toggleModal(modalActive, setModalActive)}>+</div>\n        </div>\n    )\n\n}\n\nexport default EventList","import React, { useState, useEffect } from 'react';\nimport './Calendar.css'\nimport useEventForm from '../hooks/eventForm'\nimport EventModal from './EventModal'\nimport CalendarBody from './CalendarBody';\nimport EventList from './EventList';\nimport { stringToDate } from '../utils'\n\nexport function Calendar() {\n    const today = new Date();\n\n    const [modalActive, setModalActive] = useState(false);\n    const [dateForMonth, setDateForMonth] = useState(new Date(today.getTime()))\n    const [selectedDate, setSelectedDate] = useState(new Date(today.getTime()))\n    // const [events, setEvents] = useState(sampleEvents)\n    const [events, setEvents] = useState([])\n\n\n    const fetchEvents = async () => {\n        // const result = await fetch(\"http://localhost:9000/events\");\n        const result = await fetch(\"https://fierce-beach-36013.herokuapp.com/events\");\n        result\n            .json()\n            .then(data => {\n                console.log(data);\n                setEvents(data)\n            });\n    };\n\n    useEffect(() => {\n        fetchEvents();\n    }, [])\n\n\n    const currentMonthEvents = events.filter(\n        event => new Date(event.startTime).toLocaleDateString([], {\n            year: 'numeric',\n            month: '2-digit'\n        }) === dateForMonth.toLocaleDateString([], {\n            year: 'numeric',\n            month: '2-digit'\n        })\n    )\n\n    const addEvent = () => {\n        setEvents([...events, {\n            title: inputs.title,\n            startTime: stringToDate(inputs.startDate, inputs.startTime),\n            endTime: stringToDate(inputs.endDate, inputs.endTime)\n        }])\n        setModalActive(false)\n    }\n    const initialState = { title: \"\", startTime: \"\", startDate: \"\", endTime: \"\", endDate: \"\" }\n    const { handleSubmit, handleInputChange, inputs } = useEventForm(initialState, addEvent);\n\n    const selectedDayEvents = currentMonthEvents.filter(\n        event => new Date(event.startTime).toLocaleDateString() === selectedDate.toLocaleDateString()\n    )\n\n    return (\n        <div className=\"section\">\n            <CalendarBody\n                today={today}\n                dateForMonth={dateForMonth}\n                setDateForMonth={setDateForMonth}\n                selectedDate={selectedDate}\n                setSelectedDate={setSelectedDate}\n                currentMonthEvents={currentMonthEvents} />\n\n            <EventList\n                selectedDate={selectedDate}\n                selectedDayEvents={selectedDayEvents}\n                modalActive={modalActive}\n                setModalActive={setModalActive} />\n\n            {modalActive && <EventModal\n                modalActive={modalActive}\n                setModalActive={setModalActive}\n                handleSubmit={handleSubmit}\n                handleInputChange={handleInputChange}\n                inputs={inputs} />}\n        </div >\n    )\n}","import React from 'react';\r\n// import { Counter } from './features/counter/Counter';\r\nimport { Calendar } from './components/Calendar'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Calendar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}